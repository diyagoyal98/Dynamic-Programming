class Solution {
public:
    /*int fun(int idx,vector<int>&prices,int buy,vector<vector<int>>&dp)
    {
        if(idx==prices.size())
        return 0;
        if(dp[idx][buy]!=-1)
        return dp[idx][buy];
        if(buy)
        {
            return  dp[idx][buy]=max(-prices[idx]+fun(idx+1,prices,0,dp),
                        0+fun(idx+1,prices,1,dp)); 
        }
        else
        {
            return  dp[idx][buy]=max(prices[idx]+fun(idx+1,prices,1,dp),
                    0+fun(idx+1,prices,0,dp));
        }
    }
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,-1));
        return fun(0,prices,1,dp);    
    }*/

    /*int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,0));

        for(int idx=n-1;idx>=0;idx--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                if(buy)
                {
                    dp[idx][buy]=max( -prices[idx]+dp[idx+1][0], 0+dp[idx+1][1] );
                }
                else
                {
                    dp[idx][buy]=max( prices[idx]+dp[idx+1][1] , 0+dp[idx+1][0] );
                }
            }
        }
        return dp[0][1];
    }*/


    int maxProfit(vector<int>&prices)
    {
        int n=prices.size();
        vector<int>forward(2,0);
        vector<int>curr(2,0);

        for(int idx=n-1;idx>=0;idx--)
        {
            for(int buy=0;buy<=1;buy++)
            {
                if(buy)
                {
                    curr[buy]=max( -prices[idx]+forward[0], forward[1] );
                }
                else
                {
                    curr[buy]=max( prices[idx]+forward[1] , 0+forward[0] );
                }
            }
            forward=curr;
        }
        return forward[1];
    }

};
