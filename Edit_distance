class Solution {
public:
    /*int fun(int n1,int n2,string s1,string s2)
    {
        if(n2<0)
        return n1+1;
        if(n1<0)
        return n2+1;


        if(s1[n1]==s2[n2])
        return fun(n1-1,n2-1,s1,s2);
        else 
        {
            return 1 + min( fun(n1,n2-1,s1,s2), min( fun(n1-1,n2,s1,s2), fun(n1-1,n2-1,s1,s2) ) );
        }
    }
    int minDistance(string word1, string word2) 
    {
        int n1=word1.size();
        int n2=word2.size();

        return fun(n1-1,n2-1,word1,word2);    
    }*/


    /*int fun(int n1,int n2,string s1,string s2,vector<vector<int>>&dp)
    {
        if(n2<0)
        return n1+1;
        if(n1<0)
        return n2+1;
        if(dp[n1][n2]!=-1)
        return dp[n1][n2];

        if(s1[n1]==s2[n2])
        return dp[n1][n2]=fun(n1-1,n2-1,s1,s2,dp);
        else 
        {
            return dp[n1][n2]=1 + min( fun(n1,n2-1,s1,s2,dp), min( fun(n1-1,n2,s1,s2,dp), fun(n1-1,n2-1,s1,s2,dp) ) );
        }
    }
    int minDistance(string word1, string word2) 
    {
        int n1=word1.size();
        int n2=word2.size();
        vector<vector<int>>dp(n1,vector<int>(n2,-1));

        return fun(n1-1,n2-1,word1,word2,dp);    
    }*/




    int minDistance(string word1, string word2) 
    {
        int n1=word1.size();
        int n2=word2.size();
        vector<vector<int>>dp(n1+1,vector<int>(n2+1,0));

        //base cases
        for(int i=0;i<=n1;i++)
        {
            dp[i][0]=i;
        }   

        for(int i=0;i<=n2;i++)
        {
            dp[0][i]=i;
        }


        for(int i=1;i<=n1;i++)
        {
            for(int j=1;j<=n2;j++)
            {
                if(word1[i-1]==word2[j-1])
                dp[i][j]=dp[i-1][j-1];
                else
                {
                    dp[i][j]=1+min( dp[i-1][j], min( dp[i][j-1] , dp[i-1][j-1]) );
                }
            }
        }
        return dp[n1][n2];
    }
};
