/*Given two strings s and t, return the number of distinct 
subsequences
 of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.*/

 /*int fun(int n1,int n2,string s,string t)
    {
        if(n2<0)
        return 1;
        if(n1<0)
        return 0;


        if(s[n1]==t[n2])
        return (fun(n1-1,n2-1,s,t)+fun(n1-1,n2,s,t));
        else 
        return fun(n1-1,n2,s,t);
    }
    int numDistinct(string s, string t) 
    {
        int n1=s.length();
        int n2=t.length();
        return fun(n1-1,n2-1,s,t);    
    }*/

    /*int fun(int n1 ,int n2 , string s,string t , vector<vector<int>>&dp)
    {
        if(n2<0)
        return 1;
        if(n1<0)
        return 0;
        if(dp[n1][n2]!=-1)
        return dp[n1][n2];

        if(s[n1]==t[n2])
        return dp[n1][n2]=(fun(n1-1,n2-1,s,t,dp)+fun(n1-1,n2,s,t,dp));
        else 
        return dp[n1][n2]=fun(n1-1,n2,s,t,dp);
        

    }

    int numDistinct(string s, string t) 
    {
        int n1=s.length();
        int n2=t.length();
        vector<vector<int>>dp(n1,vector<int>(n2,-1));
        return fun(n1-1,n2-1,s,t,dp);    
    }*/



    /*int numDistinct(string s, string t) 
    {
        int n1=s.length();
        int n2=t.length();
        vector<vector<double>>dp(n1+1,vector<double>(n2+1,0));

        for(int i=0;i<=n1;i++)
        dp[i][0]=1;

        for(int i=1;i<=n1;i++)
        {
            for(int j=1;j<=n2;j++)
            {
                if(s[i-1]==t[j-1])
                dp[i][j]=(dp[i-1][j-1]+dp[i-1][j]);
                else 
                dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n1][n2];
    }*/

    int numDistinct(string s, string t) 
    {
        int n1=s.length();
        int n2=t.length();
        vector<double>prev(n2+1),curr(n2+1);
        prev[0]=1;
        curr[0]=1;

        for(int i=1;i<=n1;i++)
        {
            for(int j=1;j<=n2;j++)
            {
                if(s[i-1]==t[j-1])
                curr[j]=(prev[j-1]+prev[j]);
                else 
                curr[j]=prev[j];
            }
            prev=curr;
        }
        return prev[n2];
    }
